#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define MAX_INPUT_LENGTH 100
#define MAX_COMMANDS 10

char** split_input(char* input) {
    char** commands = malloc(MAX_COMMANDS * sizeof(char*));
    int command_count = 0;
    int command_length = 0;
    int in_command = 0;
    
    for (int i = 0; i < strlen(input); i++) {
        if (input[i] == ' ' || input[i] == '\t' || input[i] == '\n') {
            if (in_command) {
                 commands[command_count] = malloc((command_length + 1) * sizeof(char));
                strncpy(commands[command_count], &input[i - command_length], command_length);
                commands[command_count][command_length] = '\0';
                command_count++;
                command_length = 0;
                in_command = 0;
            }
        } else {
            if (!in_command) {
                       in_command = 1;
            }
            command_length++;
        }
    }
    
    if (in_command) {
          commands[command_count] = malloc((command_length + 1) * sizeof(char));
        strncpy(commands[command_count], &input[strlen(input) - command_length], command_length);
        commands[command_count][command_length] = '\0';
        command_count++;
    }
    commands[command_count] = NULL;
    
    return commands;
}

void free_commands(char** commands) {
    for (int i = 0; commands[i] != NULL; i++) {
        free(commands[i]);
    }
    free(commands);
}

void prompt() {
    char input[MAX_INPUT_LENGTH];
    char** commands;
    
    while (1) {
        printf("$ ");
        
        if (fgets(input, sizeof(input), stdin) == NULL) {
                break;
        }
           input[strcspn(input, "\n")] = '\0';
        
        if (strcmp(input, "exit") == 0) {
             exit(0);
        }
        
        commands = split_input(input);
        
        if (strcmp(commands[0], "exit") == 0 && commands[1] != NULL) {
               int status = atoi(commands[1]);
            exit(status);
        }
        
        if (strcmp(commands[0], "setenv") == 0 && commands[1] != NULL && commands[2] != NULL) {
                  if (setenv(commands[1], commands[2], 1) != 0) {
                fprintf(stderr, "Error setting environment variable\n");
            }
        }
        
        if (strcmp(commands[0], "unsetenv") == 0 && commands[1] != NULL) {
                   if (unsetenv(commands[1]) != 0) {
                fprintf(stderr, "Error unsetting environment variable\n");
            }
        }
        
        if (strcmp(commands[0], "cd") == 0) {
                if (commands[1] == NULL) {
                    char* home_directory = getenv("HOME");
                if (home_directory == NULL) {
                    fprintf(stderr, "Home directory not found\n");
                } else {
                    if (chdir(home_directory) != 0) {
                        fprintf(stderr, "Error changing directory\n");
                    }
                }
            } else if (strcmp(commands[1], "-") == 0) {
                           char* previous_directory = getenv("OLDPWD");
                if (previous_directory == NULL) {
                    fprintf(stderr, "Previous directory not found\n");
                } else {
                    if (chdir(previous_directory) != 0) {
                        fprintf(stderr, "Error changing directory\n");
                    }
                }
            } else {
                            if (chdir(commands[1]) != 0) {
                    fprintf(stderr, "Error changing directory\n");
                }
            }
        }
        
        for (int i = 0; commands[i] != NULL; i++) {
            printf("Command %d: %s\n", i, commands[i]);
        }
        
        free_commands(commands);
    }
}

int main() {
    prompt();
    
    return 0;
}
