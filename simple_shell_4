#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define MAX_COMMAND_LENGTH 100
#define MAX_PATH_LENGTH 1000

void prompt() {
    char command[MAX_COMMAND_LENGTH];
    char path[MAX_PATH_LENGTH];
    char* token;
    char* paths[100];
       char* path_env = getenv("PATH");
    int i = 0;
    token = strtok(path_env, ":");
    while (token != NULL) {
        paths[i++] = token;
        token = strtok(NULL, ":");
    }
    paths[i] = NULL;
    
    while (1) {
        printf("$ ");
        
        if (fgets(command, sizeof(command), stdin) == NULL){ 
            break;
        }
          command[strcspn(command, "\n")] = '\0';
        
        if (strcmp(command, "exit") == 0) {
            break;
        }
        
        int found = 0;
        for (i = 0; paths[i] != NULL; i++) {
            snprintf(path, sizeof(path), "%s/%s", paths[i], command);
            if (access(path, X_OK) == 0) {
                found = 1;
                break;
            }
        }
        
        if (found) {
            execute_command(path);
        } else {
            printf("Command not found: %s\n", command);
        }
    }
}

void execute_command(const char* command) {
    pid_t pid = fork();
    
    if (pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    } else if (pid == 0) {
        execl(command, command, NULL);
         perror("exec");
        exit(EXIT_FAILURE);
    } else {
        wait(NULL);
    }
}

int main() {
    prompt();
    
    return 0;
}

